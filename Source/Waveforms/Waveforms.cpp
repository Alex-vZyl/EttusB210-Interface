// ================================================================================================================================================================================ //
//  Includes.                                                                                                                                                                       //
// ================================================================================================================================================================================ //

#include <iostream>
#include "Waveforms.h"
#include <string>
#include <vector>
#include <complex>
#include <math.h>
#include "../../External/Misc/ConsoleColor.h"

// ================================================================================================================================================================================ //
//  Constants.                                                                                                                                                                      //
// ================================================================================================================================================================================ //

const float PI = 3.14159265359;
const std::complex<float> i(0, 1);

// ================================================================================================================================================================================ //
//  Frequency ramp.                                                                                                                                                                 //
// ================================================================================================================================================================================ //

std::vector<std::complex<float>> generateFreqRamp(int nSamples, float bandwidth, float amplitude, unsigned samplingFreq)
{
	// The wave.
	std::vector<std::complex<float>> wave(nSamples);

	// Ensure nSamples is odd.
	if (nSamples % 2 == 0) 
	{
		std::cout << red << "\n[WAVEFORM] [ERROR]: " << white << "nSamples is not an odd number.\n";
	}
	else
	{
		// Calculate wave parameters.
		float freqGradient = bandwidth / ((float)nSamples - 1.f);
		int index = 0;
		float FREQ;
		// Populate wave vector.
		for (int n = floor(-(nSamples - 1) / 2); n <= ceil((nSamples - 1) / 2); n++)
		{
			FREQ = ((freqGradient * index) - (bandwidth / 2)) / samplingFreq;
			wave[index] = std::exp(n * -2 * PI * FREQ * i);
			index++;
		}
	}

	// Return the wave.
	return wave;
}

// ================================================================================================================================================================================ //
//  EOF.	                                                                                                                                                                        //
// ================================================================================================================================================================================ //
